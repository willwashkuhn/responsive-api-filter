{"version":3,"sources":["components/sports.js","App.js","serviceWorker.js","index.js"],"names":["Sports","_ref","sports","react_default","a","createElement","map","sport","className","key","idSport","strSport","strSportDescription","App","state","query","filteredData","handleInputChange","event","target","value","_this","setState","prevState","filter","toLowerCase","includes","getData","fetch","then","res","json","data","sort","b","catch","console","log","this","placeholder","onChange","components_sports","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oMAmBeA,EAjBA,SAAAC,GAAgB,IAAbC,EAAaD,EAAbC,OAChB,OACEC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cAAQF,EAAAC,EAAAC,cAAA,0BACPH,EACEI,IAAI,SAACC,GAAD,OACDJ,EAAAC,EAAAC,cAAA,OAAKG,UAAU,OAAOC,IAAKF,EAAMG,SAC/BP,EAAAC,EAAAC,cAAA,OAAKG,UAAU,aACbL,EAAAC,EAAAC,cAAA,MAAIG,UAAU,cAAcD,EAAMI,UAClCR,EAAAC,EAAAC,cAAA,KAAGG,UAAU,aAAaD,EAAMK,2BCyDjCC,6MAhEbC,MAAQ,CACNC,MAAO,GACPC,aAAc,GACdd,OAAQ,MAOVe,kBAAoB,SAAAC,GAClB,IAAMH,EAAQG,EAAMC,OAAOC,MAE3BC,EAAKC,SAAS,SAAAC,GACZ,IAAMP,EAAeO,EAAUrB,OAAOsB,OAAO,SAAAjB,GAC3C,OAAOA,EAAMI,SAASc,cAAcC,SAASX,EAAMU,iBAGrD,MAAO,CACLV,QACAC,qBAKNW,QAAU,WACRC,MAAM,4DACLC,KAAK,SAAAC,GAAG,OAAIA,EAAIC,SAChBF,KAAK,SAACG,GAAS,IACNjB,EAAUM,EAAKP,MAAfC,MACJb,EAAS8B,EAAK9B,OAAO+B,KAAK,SAAC7B,EAAG8B,GAChC,OAAI9B,EAAEO,SAAWuB,EAAEvB,UAAoB,EACnCP,EAAEO,SAAWuB,EAAEvB,SAAmB,EAC/B,IAGTT,EAASA,EAAO+B,KAAK,SAAC7B,EAAG8B,GAAJ,OAAU9B,EAAEO,SAAWuB,EAAEvB,WAC9C,IAAMK,EAAegB,EAAK9B,OAAOsB,OAAO,SAAAjB,GACtC,OAAOA,EAAMI,SAASc,cAAcC,SAASX,EAAMU,iBAErDJ,EAAKC,SAAS,CACZpB,SACAc,mBAGHmB,MAAMC,QAAQC,0FAtCfC,KAAKX,2CA0CL,OACExB,EAAAC,EAAAC,cAAA,OAAKG,UAAU,cACbL,EAAAC,EAAAC,cAAA,YACEF,EAAAC,EAAAC,cAAA,SACEkC,YAAY,gBACZnB,MAAOkB,KAAKxB,MAAMC,MAClByB,SAAUF,KAAKrB,qBAGnBd,EAAAC,EAAAC,cAACoC,EAAD,CAAQvC,OAAQoC,KAAKxB,MAAME,uBA3DjB0B,aCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO9C,EAAAC,EAAAC,cAAC6C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,KAAK,SAAA2B,GACjCA,EAAaC","file":"static/js/main.d76c9fb4.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nconst Sports = ({ sports }) => {\r\n  return (\r\n    <div>\r\n      <center><h1>Sports List</h1></center>\r\n      {sports\r\n        .map((sport) => (\r\n            <div className=\"card\" key={sport.idSport}>\r\n              <div className=\"card-body\">\r\n                <h5 className=\"card-title\">{sport.strSport}</h5>\r\n                <p className=\"card-text\">{sport.strSportDescription}</p>\r\n              </div>\r\n            </div>\r\n      ))}\r\n    </div>\r\n  )\r\n};\r\n\r\nexport default Sports","import React, {Component} from 'react';\r\nimport Sports from './components/sports';\r\n\r\nclass App extends Component {\r\n  state = {\r\n    query: \"\",\r\n    filteredData: [],\r\n    sports: []\r\n  }\r\n\r\n  componentWillMount() {\r\n    this.getData();\r\n  }\r\n\r\n  handleInputChange = event => {\r\n    const query = event.target.value;\r\n\r\n    this.setState(prevState => {\r\n      const filteredData = prevState.sports.filter(sport => {\r\n        return sport.strSport.toLowerCase().includes(query.toLowerCase());\r\n      });\r\n\r\n      return {\r\n        query,\r\n        filteredData\r\n      };\r\n    });\r\n  };\r\n\r\n  getData = () => {\r\n    fetch('https://www.thesportsdb.com/api/v1/json/1/all_sports.php')\r\n    .then(res => res.json())\r\n    .then((data) => {\r\n      const { query } = this.state;\r\n      let sports = data.sports.sort((a, b) => {\r\n        if (a.strSport < b.strSport) { return -1; }\r\n        if (a.strSport > b.strSport) { return 1; }\r\n        return 0;\r\n      });\r\n      // console.log(sports);\r\n      sports = sports.sort((a, b) => a.strSport - b.strSport);\r\n      const filteredData = data.sports.filter(sport => {\r\n        return sport.strSport.toLowerCase().includes(query.toLowerCase());\r\n      });\r\n      this.setState({ \r\n        sports,\r\n        filteredData\r\n       });\r\n    })\r\n    .catch(console.log)\r\n  };\r\n\r\n  render () {\r\n    return (\r\n      <div className=\"searchForm\">\r\n        <form>\r\n          <input\r\n            placeholder=\"Search for...\"\r\n            value={this.state.query}\r\n            onChange={this.handleInputChange}\r\n          />\r\n        </form>\r\n        <Sports sports={this.state.filteredData} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}